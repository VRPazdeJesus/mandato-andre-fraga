{"version":3,"file":"ngx-mask-ionic.js.map","sources":["ng://ngx-mask-ionic/lib/config.ts","ng://ngx-mask-ionic/lib/mask-applier.service.ts","ng://ngx-mask-ionic/lib/mask.service.ts","ng://ngx-mask-ionic/lib/mask.directive.ts","ng://ngx-mask-ionic/lib/mask.pipe.ts","ng://ngx-mask-ionic/lib/ngx-mask-ionic.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface IConfig {\r\n  sufix: string;\r\n  prefix: string;\r\n  clearIfNotMatch: boolean;\r\n  showTemplate: boolean;\r\n  showMaskTyped: boolean;\r\n  dropSpecialCharacters: boolean | string[];\r\n  specialCharacters: string[];\r\n  patterns: {\r\n    [character: string]: {\r\n      pattern: RegExp;\r\n      optional?: boolean;\r\n    };\r\n  };\r\n}\r\n\r\nexport type optionsConfig = Partial<IConfig>;\r\nexport const config: InjectionToken<string> = new InjectionToken('config');\r\nexport const NEW_CONFIG: InjectionToken<string> = new InjectionToken(\r\n  'NEW_CONFIG'\r\n);\r\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken(\r\n  'INITIAL_CONFIG'\r\n);\r\n\r\nexport const initialConfig: IConfig = {\r\n  sufix: '',\r\n  prefix: '',\r\n  clearIfNotMatch: false,\r\n  showTemplate: false,\r\n  showMaskTyped: false,\r\n  dropSpecialCharacters: true,\r\n  specialCharacters: [\r\n    '/',\r\n    '(',\r\n    ')',\r\n    '.',\r\n    ':',\r\n    '-',\r\n    ' ',\r\n    '+',\r\n    ',',\r\n    '@',\r\n    '[',\r\n    ']',\r\n    '\"',\r\n    \"'\"\r\n  ],\r\n  patterns: {\r\n    '0': {\r\n      pattern: new RegExp('\\\\d')\r\n    },\r\n    '9': {\r\n      pattern: new RegExp('\\\\d'),\r\n      optional: true\r\n    },\r\n    A: {\r\n      pattern: new RegExp('[a-zA-Z0-9]')\r\n    },\r\n    S: {\r\n      pattern: new RegExp('[a-zA-Z]')\r\n    },\r\n    d: {\r\n      pattern: new RegExp('\\\\d')\r\n    },\r\n    m: {\r\n      pattern: new RegExp('\\\\d')\r\n    }\r\n  }\r\n};\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { config, IConfig } from './config';\r\n\r\n@Injectable()\r\nexport class MaskApplierService {\r\n  public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\r\n  public showTemplate: IConfig['showTemplate'];\r\n  public clearIfNotMatch: IConfig['clearIfNotMatch'];\r\n  public maskExpression = '';\r\n  public maskSpecialCharacters: IConfig['specialCharacters'];\r\n  public maskAvailablePatterns: IConfig['patterns'];\r\n  public prefix: IConfig['prefix'];\r\n  public sufix: IConfig['sufix'];\r\n  public customPattern: IConfig['patterns'];\r\n\r\n  private _shift: Set<number>;\r\n\r\n  public constructor(@Inject(config) protected _config: IConfig) {\r\n    this._shift = new Set();\r\n    this.maskSpecialCharacters = this._config!.specialCharacters;\r\n    this.maskAvailablePatterns = this._config.patterns;\r\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\r\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\r\n    this.maskSpecialCharacters = this._config!.specialCharacters;\r\n    this.maskAvailablePatterns = this._config.patterns;\r\n    this.prefix = this._config.prefix;\r\n    this.sufix = this._config.sufix;\r\n  }\r\n  // tslint:disable-next-line:no-any\r\n  public applyMaskWithPattern(\r\n    inputValue: string,\r\n    maskAndPattern: [string, IConfig['patterns']]\r\n  ): string {\r\n    const [mask, customPattern] = maskAndPattern;\r\n    this.customPattern = customPattern;\r\n    return this.applyMask(inputValue, mask);\r\n  }\r\n  public applyMask(\r\n    inputValue: string,\r\n    maskExpression: string,\r\n    position: number = 0,\r\n    cb: Function = () => {}\r\n  ): string {\r\n    if (\r\n      inputValue === undefined ||\r\n      inputValue === null ||\r\n      maskExpression === undefined\r\n    ) {\r\n      return '';\r\n    }\r\n\r\n    let cursor = 0;\r\n    let result = ``;\r\n    let multi = false;\r\n\r\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\r\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\r\n    }\r\n\r\n    const inputArray: string[] = inputValue.toString().split('');\r\n\r\n    // tslint:disable-next-line\r\n    for (\r\n      let i: number = 0, inputSymbol: string = inputArray[0];\r\n      i < inputArray.length;\r\n      i++, inputSymbol = inputArray[i]\r\n    ) {\r\n      if (cursor === maskExpression.length) {\r\n        break;\r\n      }\r\n      if (\r\n        this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\r\n        maskExpression[cursor + 1] === '?'\r\n      ) {\r\n        result += inputSymbol;\r\n        cursor += 2;\r\n      } else if (\r\n        maskExpression[cursor + 1] === '*' &&\r\n        multi &&\r\n        this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\r\n      ) {\r\n        result += inputSymbol;\r\n        cursor += 3;\r\n        multi = false;\r\n      } else if (\r\n        this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\r\n        maskExpression[cursor + 1] === '*'\r\n      ) {\r\n        result += inputSymbol;\r\n        multi = true;\r\n      } else if (\r\n        maskExpression[cursor + 1] === '?' &&\r\n        this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\r\n      ) {\r\n        result += inputSymbol;\r\n        cursor += 3;\r\n      } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\r\n        if (maskExpression[cursor] === 'd') {\r\n          if (Number(inputSymbol) > 3) {\r\n            result += 0;\r\n            cursor += 1;\r\n            const shiftStep: number = /\\*|\\?/g.test(\r\n              maskExpression.slice(0, cursor)\r\n            )\r\n              ? inputArray.length\r\n              : cursor;\r\n            this._shift.add(shiftStep + this.prefix.length || 0);\r\n            i--;\r\n            continue;\r\n          }\r\n        }\r\n        if (maskExpression[cursor - 1] === 'd') {\r\n          if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 31) {\r\n            continue;\r\n          }\r\n        }\r\n        if (maskExpression[cursor] === 'm') {\r\n          if (Number(inputSymbol) > 1) {\r\n            result += 0;\r\n            cursor += 1;\r\n            const shiftStep: number = /\\*|\\?/g.test(\r\n              maskExpression.slice(0, cursor)\r\n            )\r\n              ? inputArray.length\r\n              : cursor;\r\n            this._shift.add(shiftStep + this.prefix.length || 0);\r\n            i--;\r\n            continue;\r\n          }\r\n        }\r\n        if (maskExpression[cursor - 1] === 'm') {\r\n          if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 12) {\r\n            continue;\r\n          }\r\n        }\r\n        result += inputSymbol;\r\n        cursor++;\r\n      } else if (\r\n        this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1\r\n      ) {\r\n        result += maskExpression[cursor];\r\n        cursor++;\r\n        const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\r\n          ? inputArray.length\r\n          : cursor;\r\n        this._shift.add(shiftStep + this.prefix.length || 0);\r\n        i--;\r\n      } else if (\r\n        this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\r\n        this.maskAvailablePatterns[maskExpression[cursor]] &&\r\n        this.maskAvailablePatterns[maskExpression[cursor]].optional\r\n      ) {\r\n        cursor++;\r\n        i--;\r\n      } else if (\r\n        this.maskExpression[cursor + 1] === '*' &&\r\n        this._findSpecialChar(this.maskExpression[cursor + 2]) &&\r\n        this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2]\r\n      ) {\r\n        cursor += 3;\r\n        result += inputSymbol;\r\n      }\r\n    }\r\n\r\n    if (\r\n      result.length + 1 === maskExpression.length &&\r\n      this.maskSpecialCharacters.indexOf(\r\n        maskExpression[maskExpression.length - 1]\r\n      ) !== -1\r\n    ) {\r\n      result += maskExpression[maskExpression.length - 1];\r\n    }\r\n\r\n    let shift = 1;\r\n    let newPosition: number = position + 1;\r\n\r\n    while (this._shift.has(newPosition)) {\r\n      shift++;\r\n      newPosition++;\r\n    }\r\n\r\n    cb(this._shift.has(position) ? shift : 0);\r\n    let res = `${this.prefix}${result}`;\r\n    res =\r\n      this.sufix && cursor === maskExpression.length\r\n        ? `${this.prefix}${result}${this.sufix}`\r\n        : `${this.prefix}${result}`;\r\n    return res;\r\n  }\r\n  public _findSpecialChar(inputSymbol: string): undefined | string {\r\n    const symbol: string | undefined = this.maskSpecialCharacters.find(\r\n      (val: string) => val === inputSymbol\r\n    );\r\n    return symbol;\r\n  }\r\n\r\n  private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\r\n    this.maskAvailablePatterns = this.customPattern\r\n      ? this.customPattern\r\n      : this.maskAvailablePatterns;\r\n    return (\r\n      this.maskAvailablePatterns[maskSymbol] &&\r\n      this.maskAvailablePatterns[maskSymbol].pattern &&\r\n      this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol)\r\n    );\r\n  }\r\n}\r\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\r\nimport { config, IConfig } from './config';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { MaskApplierService } from './mask-applier.service';\r\nimport { NgControl } from '@angular/forms';\r\n\r\n@Injectable()\r\nexport class MaskService extends MaskApplierService {\r\n  public maskExpression = '';\r\n  public isNumberValue = false;\r\n  public showMaskTyped = false;\r\n  public maskIsShown = '';\r\n  private _formElement: HTMLInputElement;\r\n  private unmaskedValue: string | number;\r\n  public onTouch = () => {};\r\n  public constructor(\r\n    // tslint:disable-next-line\r\n    @Inject(DOCUMENT) private document: any,\r\n    @Inject(config) protected _config: IConfig,\r\n    private _elementRef: ElementRef,\r\n    private _renderer: Renderer2,\r\n    private _ngControl: NgControl\r\n  ) {\r\n    super(_config);\r\n    this.setFormElement(_elementRef.nativeElement);\r\n\r\n    setTimeout(() => {\r\n      if (this._formElement.localName !== 'input') {\r\n        const inputEl = this._elementRef.nativeElement.querySelector('input');\r\n        if (inputEl != null) {\r\n          this.setFormElement(inputEl);\r\n        } else {\r\n          console.warn(\r\n            'mask-service: Could not find Input Element.  Please make sure one is present.'\r\n          );\r\n        }\r\n      }\r\n\r\n      this._ngControl.valueChanges.subscribe((value: string) => {\r\n        this._onControlValueChange(value);\r\n      });\r\n    });\r\n  }\r\n\r\n  public setFormElement(el: HTMLInputElement) {\r\n    this._formElement = el;\r\n  }\r\n\r\n  public applyMask(\r\n    inputValue: string,\r\n    maskExpression: string,\r\n    position: number = 0,\r\n    cb: Function = () => {}\r\n  ): string {\r\n    this.maskIsShown = this.showMaskTyped\r\n      ? this.maskExpression.replace(/[0-9]/g, '_')\r\n      : '';\r\n    if (!inputValue && this.showMaskTyped) {\r\n      return this.prefix + this.maskIsShown;\r\n    }\r\n\r\n    const result = super.applyMask(inputValue, maskExpression, position, cb);\r\n    this.unmaskedValue = this.getUnmaskedValue(result);\r\n\r\n    return this._applyMaskResult(result);\r\n  }\r\n\r\n  public applyValueChanges(\r\n    position: number = 0,\r\n    cb: Function = () => {}\r\n  ): void {\r\n    const maskedInput: string | number = this.applyMask(\r\n      this._formElement.value,\r\n      this.maskExpression,\r\n      position,\r\n      cb\r\n    );\r\n    this._formElement.value = maskedInput;\r\n    if (this._formElement === this.document.activeElement) {\r\n      return;\r\n    }\r\n    this.clearIfNotMatchFn();\r\n  }\r\n\r\n  public showMaskInInput(): void {\r\n    if (this.showMaskTyped) {\r\n      this.maskIsShown = this.maskExpression.replace(/[0-9]/g, '_');\r\n    }\r\n  }\r\n\r\n  public clearIfNotMatchFn(): void {\r\n    console.log('clear-if-not-matched');\r\n    if (\r\n      this.clearIfNotMatch === true &&\r\n      this.maskExpression.length !== this._formElement.value.length\r\n    ) {\r\n      this.setValue('');\r\n      this.applyMask(this._formElement.value, this.maskExpression);\r\n    }\r\n  }\r\n\r\n  public setValue(value: string) {\r\n    this.unmaskedValue = this.getUnmaskedValue(value);\r\n    this._ngControl.control.setValue(value);\r\n  }\r\n  public setFormElementProperty(name: string, value: string | boolean) {\r\n    if (this._formElement) {\r\n      this._renderer.setProperty(this._formElement, name, value);\r\n    }\r\n  }\r\n\r\n  public getUnmaskedValue(result: string): string | number {\r\n    const resultNoSuffixOrPrefix = this._removeSufix(\r\n      this._removePrefix(result)\r\n    );\r\n    let changeValue: string | number = resultNoSuffixOrPrefix;\r\n\r\n    if (Array.isArray(this.dropSpecialCharacters)) {\r\n      changeValue = this._removeMask(\r\n        resultNoSuffixOrPrefix,\r\n        this.dropSpecialCharacters\r\n      );\r\n    } else if (this.dropSpecialCharacters) {\r\n      changeValue = this._removeMask(\r\n        resultNoSuffixOrPrefix,\r\n        this.maskSpecialCharacters\r\n      );\r\n      changeValue = this.isNumberValue ? Number(changeValue) : changeValue;\r\n    }\r\n\r\n    return changeValue;\r\n  }\r\n\r\n  private _removeMask(\r\n    value: string,\r\n    specialCharactersForRemove: string[]\r\n  ): string {\r\n    return value\r\n      ? value.replace(this._regExpForRemove(specialCharactersForRemove), '')\r\n      : value;\r\n  }\r\n\r\n  private _removePrefix(value: string): string {\r\n    if (!this.prefix) {\r\n      return value;\r\n    }\r\n    return value ? value.replace(this.prefix, '') : value;\r\n  }\r\n\r\n  private _removeSufix(value: string): string {\r\n    if (!this.sufix) {\r\n      return value;\r\n    }\r\n    return value ? value.replace(this.sufix, '') : value;\r\n  }\r\n\r\n  private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\r\n    return new RegExp(\r\n      specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'),\r\n      'gi'\r\n    );\r\n  }\r\n\r\n  private _applyMaskResult(result: string) {\r\n    if (!this.showMaskTyped) {\r\n      return result;\r\n    }\r\n    const resLen: number = result.length;\r\n    const prefNmask: string = this.prefix + this.maskIsShown;\r\n    const ifMaskIsShown = prefNmask.slice(resLen);\r\n\r\n    return result + ifMaskIsShown;\r\n  }\r\n\r\n  private _onControlValueChange(value: string) {\r\n    /*\r\n      Because we are no longer working with the ControlValueAccessor (since it doesn't play nice with Ionic).\r\n      We need logic here to track changes made programmatically to the form value.  Specifically changes\r\n      done OUTSIDE of the mask. Since changes done inside the mask may also fire off this method\r\n      we need to do some jiu jitsu to ensure we are ignoring those changes.\r\n    */\r\n    const newValue = this.getUnmaskedValue(value);\r\n\r\n    if (this.unmaskedValue === newValue) {\r\n      return;\r\n    }\r\n\r\n    let unmaskedSubstring: string = null;\r\n\r\n    // This method (value change) fires off before a Keydown or Input event, so we need to subtract\r\n    // the latest change and compare to our previous (known) value.\r\n    if (this.unmaskedValue != null) {\r\n      const v = this.unmaskedValue.toString();\r\n      unmaskedSubstring = v.substring(0, v.length - 1);\r\n    }\r\n\r\n    if (newValue !== unmaskedSubstring) {\r\n      const nv = newValue != null ? newValue.toString() : null;\r\n      const v = this.applyMask(nv, this.maskExpression);\r\n      this.setValue(v);\r\n    }\r\n  }\r\n}\r\n","import { Directive, HostListener, Inject, Input } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { NgControl } from '@angular/forms';\r\nimport { MaskService } from './mask.service';\r\nimport { IConfig } from './config';\r\n\r\n@Directive({\r\n  selector: '[mask]',\r\n  providers: [MaskService]\r\n})\r\nexport class MaskDirective {\r\n  private _maskValue: string;\r\n  private _inputValue: string;\r\n  private _position: number | null = null;\r\n  // tslint:disable-next-line\r\n  private _start: number;\r\n  private _end: number;\r\n  // tslint:disable-next-line\r\n  public onTouch = () => {};\r\n  public constructor(\r\n    // tslint:disable-next-line\r\n    @Inject(DOCUMENT) private document: any,\r\n    private _maskService: MaskService,\r\n    private _ngControl: NgControl\r\n  ) {}\r\n\r\n  @Input('mask')\r\n  public set maskExpression(value: string) {\r\n    this._maskValue = value || '';\r\n    if (!this._maskValue) {\r\n      return;\r\n    }\r\n    this._inputValue = this._ngControl.control.value;\r\n    this._initializeMask();\r\n  }\r\n\r\n  @Input()\r\n  public set specialCharacters(value: IConfig['specialCharacters']) {\r\n    if (\r\n      !value ||\r\n      !Array.isArray(value) ||\r\n      (Array.isArray(value) && !value.length)\r\n    ) {\r\n      return;\r\n    }\r\n    this._maskService.maskSpecialCharacters = value;\r\n  }\r\n\r\n  @Input()\r\n  public set patterns(value: IConfig['patterns']) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.maskAvailablePatterns = value;\r\n  }\r\n\r\n  @Input()\r\n  public set prefix(value: IConfig['prefix']) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.prefix = value;\r\n  }\r\n\r\n  @Input()\r\n  public set sufix(value: IConfig['sufix']) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.sufix = value;\r\n  }\r\n\r\n  @Input()\r\n  public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\r\n    this._maskService.dropSpecialCharacters = value;\r\n  }\r\n\r\n  @Input()\r\n  public set showMaskTyped(value: IConfig['showMaskTyped']) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.showMaskTyped = value;\r\n  }\r\n\r\n  @Input()\r\n  public set showTemplate(value: IConfig['showTemplate']) {\r\n    this._maskService.showTemplate = value;\r\n  }\r\n\r\n  @Input()\r\n  public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\r\n    this._maskService.clearIfNotMatch = value;\r\n  }\r\n\r\n  @HostListener('input', ['$event'])\r\n  public onInput(e: KeyboardEvent): void {\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n    this._inputValue = el.value;\r\n\r\n    if (!this._maskValue) {\r\n      return;\r\n    }\r\n    const position: number =\r\n      (el.selectionStart as number) === 1\r\n        ? (el.selectionStart as number) + this._maskService.prefix.length\r\n        : (el.selectionStart as number);\r\n    let caretShift = 0;\r\n    this._maskService.applyValueChanges(\r\n      position,\r\n      (shift: number) => (caretShift = shift)\r\n    );\r\n    // only set the selection if the element is active\r\n    if (this.document.activeElement !== el) {\r\n      return;\r\n    }\r\n    el.selectionStart = el.selectionEnd =\r\n      this._position !== null\r\n        ? this._position\r\n        : position +\r\n          // tslint:disable-next-line\r\n          ((e as any).inputType === 'deleteContentBackward' ? 0 : caretShift);\r\n    this._position = null;\r\n  }\r\n\r\n  @HostListener('blur')\r\n  public onBlur(): void {\r\n    this._maskService.clearIfNotMatchFn();\r\n    this.onTouch();\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  public onFocus(e: MouseEvent | KeyboardEvent): void {\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n\r\n    if (\r\n      el !== null &&\r\n      el.selectionStart !== null &&\r\n      el.selectionStart === el.selectionEnd &&\r\n      el.selectionStart > this._maskService.prefix.length &&\r\n      // tslint:disable-next-line\r\n      (e as any).keyCode !== 38\r\n    ) {\r\n      return;\r\n    }\r\n    if (this._maskService.showMaskTyped) {\r\n      this._maskService.maskIsShown = this._maskService.maskExpression.replace(\r\n        /[0-9]/g,\r\n        '_'\r\n      );\r\n    }\r\n    el.value =\r\n      !el.value || el.value === this._maskService.prefix\r\n        ? this._maskService.prefix + this._maskService.maskIsShown\r\n        : el.value;\r\n    /** fix of cursor position with prefix when mouse click occur */\r\n    if (\r\n      ((el.selectionStart as number) || (el.selectionEnd as number)) <=\r\n      this._maskService.prefix.length\r\n    ) {\r\n      el.selectionStart = this._maskService.prefix.length;\r\n      return;\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  public onKeyDown(e: KeyboardEvent): void {\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n    if (e.keyCode === 38) {\r\n      e.preventDefault();\r\n    }\r\n    if (e.keyCode === 37 || e.keyCode === 8) {\r\n      if (\r\n        (el.selectionStart as number) <= this._maskService.prefix.length &&\r\n        (el.selectionEnd as number) <= this._maskService.prefix.length\r\n      ) {\r\n        e.preventDefault();\r\n      }\r\n      this.onFocus(e);\r\n      if (\r\n        e.keyCode === 8 &&\r\n        el.selectionStart === 0 &&\r\n        el.selectionEnd === el.value.length\r\n      ) {\r\n        el.value = this._maskService.prefix;\r\n        this._position = this._maskService.prefix\r\n          ? this._maskService.prefix.length\r\n          : 1;\r\n        this.onInput(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('paste')\r\n  public onPaste(): void {\r\n    this._position = Number.MAX_SAFE_INTEGER;\r\n  }\r\n\r\n  /** It disables the input element */\r\n  public setDisabledState(isDisabled: boolean): void {\r\n    this._maskService.setFormElementProperty('disabled', isDisabled);\r\n  }\r\n\r\n  private _repeatPatternSymbols(maskExp: string): string {\r\n    return (\r\n      (maskExp.match(/{[0-9]+}/) &&\r\n        maskExp\r\n          .split('')\r\n          .reduce((accum: string, currval: string, index: number): string => {\r\n            this._start = currval === '{' ? index : this._start;\r\n\r\n            if (currval !== '}') {\r\n              return this._maskService._findSpecialChar(currval)\r\n                ? accum + currval\r\n                : accum;\r\n            }\r\n            this._end = index;\r\n            const repeatNumber: number = Number(\r\n              maskExp.slice(this._start + 1, this._end)\r\n            );\r\n            const repaceWith: string = new Array(repeatNumber + 1).join(\r\n              maskExp[this._start - 1]\r\n            );\r\n            return accum + repaceWith;\r\n          }, '')) ||\r\n      maskExp\r\n    );\r\n  }\r\n\r\n  private _initializeMask() {\r\n    this._maskService.maskExpression = this._repeatPatternSymbols(\r\n      this._maskValue\r\n    );\r\n\r\n    const m = this._maskService.applyMask(\r\n      this._inputValue,\r\n      this._maskService.maskExpression\r\n    );\r\n\r\n    this._maskService.setValue(m);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { MaskApplierService } from './mask-applier.service';\r\nimport { IConfig } from './config';\r\n\r\n@Pipe({\r\n  name: 'mask',\r\n  pure: true\r\n})\r\nexport class MaskPipe implements PipeTransform {\r\n  public constructor(private _maskService: MaskApplierService) {}\r\n\r\n  public transform(\r\n    value: string | number,\r\n    mask: string | [string, IConfig['patterns']]\r\n  ): string {\r\n    if (!value) {\r\n      return '';\r\n    }\r\n    if (typeof mask === 'string') {\r\n      return this._maskService.applyMask(`${value}`, mask);\r\n    }\r\n    return this._maskService.applyMaskWithPattern(`${value}`, mask);\r\n  }\r\n}\r\n","import {\r\n  config,\r\n  INITIAL_CONFIG,\r\n  initialConfig,\r\n  NEW_CONFIG,\r\n  optionsConfig\r\n  } from './config';\r\nimport { MaskApplierService } from './mask-applier.service';\r\nimport { MaskDirective } from './mask.directive';\r\nimport { MaskPipe } from './mask.pipe';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\n\r\n@NgModule({\r\n  providers: [MaskApplierService, MaskPipe],\r\n  exports: [MaskDirective, MaskPipe],\r\n  declarations: [MaskDirective, MaskPipe]\r\n})\r\nexport class NgxMaskIonicModule {\r\n  public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxMaskIonicModule,\r\n      providers: [\r\n        {\r\n          provide: NEW_CONFIG,\r\n          useValue: configValue\r\n        },\r\n        {\r\n          provide: INITIAL_CONFIG,\r\n          useValue: initialConfig\r\n        },\r\n        {\r\n          provide: config,\r\n          useFactory: _configFactory,\r\n          deps: [INITIAL_CONFIG, NEW_CONFIG]\r\n        },\r\n        MaskPipe\r\n      ]\r\n    };\r\n  }\r\n  public static forChild(configValue?: optionsConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxMaskIonicModule\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function _configFactory(\r\n  initConfig: optionsConfig,\r\n  configValue: optionsConfig | (() => optionsConfig)\r\n): Function | optionsConfig {\r\n  return typeof configValue === 'function'\r\n    ? configValue()\r\n    : { ...initConfig, ...configValue };\r\n}\r\n"],"names":[],"mappings":"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"}
