{"version":3,"file":"mask-applier.service.d.ts","sources":["mask-applier.service.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IConfig } from './config';\r\nexport declare class MaskApplierService {\r\n    protected _config: IConfig;\r\n    dropSpecialCharacters: IConfig['dropSpecialCharacters'];\r\n    showTemplate: IConfig['showTemplate'];\r\n    clearIfNotMatch: IConfig['clearIfNotMatch'];\r\n    maskExpression: string;\r\n    maskSpecialCharacters: IConfig['specialCharacters'];\r\n    maskAvailablePatterns: IConfig['patterns'];\r\n    prefix: IConfig['prefix'];\r\n    sufix: IConfig['sufix'];\r\n    customPattern: IConfig['patterns'];\r\n    private _shift;\r\n    constructor(_config: IConfig);\r\n    applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string;\r\n    applyMask(inputValue: string, maskExpression: string, position?: number, cb?: Function): string;\r\n    _findSpecialChar(inputSymbol: string): undefined | string;\r\n    private _checkSymbolMask;\r\n}\r\n"]}