{"version":3,"file":"mask.service.d.ts","sources":["mask.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Renderer2 } from '@angular/core';\r\nimport { IConfig } from './config';\r\nimport { MaskApplierService } from './mask-applier.service';\r\nimport { NgControl } from '@angular/forms';\r\nexport declare class MaskService extends MaskApplierService {\r\n    private document;\r\n    protected _config: IConfig;\r\n    private _elementRef;\r\n    private _renderer;\r\n    private _ngControl;\r\n    maskExpression: string;\r\n    isNumberValue: boolean;\r\n    showMaskTyped: boolean;\r\n    maskIsShown: string;\r\n    private _formElement;\r\n    private unmaskedValue;\r\n    onTouch: () => void;\r\n    constructor(document: any, _config: IConfig, _elementRef: ElementRef, _renderer: Renderer2, _ngControl: NgControl);\r\n    setFormElement(el: HTMLInputElement): void;\r\n    applyMask(inputValue: string, maskExpression: string, position?: number, cb?: Function): string;\r\n    applyValueChanges(position?: number, cb?: Function): void;\r\n    showMaskInInput(): void;\r\n    clearIfNotMatchFn(): void;\r\n    setValue(value: string): void;\r\n    setFormElementProperty(name: string, value: string | boolean): void;\r\n    getUnmaskedValue(result: string): string | number;\r\n    private _removeMask;\r\n    private _removePrefix;\r\n    private _removeSufix;\r\n    private _regExpForRemove;\r\n    private _applyMaskResult;\r\n    private _onControlValueChange;\r\n}\r\n"]}